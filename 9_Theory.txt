Problem Statement:
A Dictionary stores keywords and its meanings. Provide facility for adding new keywords,
deleting keywords, updating values of any entry. Provide facility to display whole data
sorted in ascending/ Descending order. Also find how many maximum comparisons may
require for finding any keyword. Use Height balance tree and find the complexity for finding
a keyword
Objectives:
1. To understand concept of height balanced tree data structure.
2. To understand procedure to create height balanced tree.
Outcomes:
1. Define class for AVL using Object Oriented features.
2. Analyze working of various operations on AVL Tree .
Software Requirements:
1. 64-bit Open source Linux or its derivative
2. Open Source C++ Programming tool like G++/GCC.
3. Turbo C++ compiler
Theory:-
An empty tree is height balanced tree if T is a nonempty binary tree with TL and TR asits
left and right sub trees. The T is height balance if and only if Its balance factor is 0, 1, -1.
AVL (Adelson- Velskii and Landis) Tree: A balance binary search tree. The best searchtime,
that is O (log N) search times. An AVL tree is defined to be a well-balanced binary search
tree in which each of its nodes has the AVL property. The AVL property is that the heights of
theleft and right sub-trees of a node are either equal or if they differ only by 1.
What if the input to binary search tree comes in a sorted (ascending or descending)
manner? It will then look like this −
It is observed that BST's worst-case performance is closest to linear search algorithms, that
is Ο(n). In real-time data, we cannot predict data pattern and their frequencies. So, a need
arises to balance out the existing BST.
Named after their inventor Adelson, Velski & Landis, AVL trees are height balancing
binary search tree. AVL tree checks the height of the left and the right sub-trees and assures
that the difference is not more than 1. This difference is called the Balance Factor.
Here we see that the first tree is balanced and the next two trees are not balanced −
In the second tree, the left subtree of C has height 2 and the right subtree has height 0, so the
difference is 2. In the third tree, the right subtree of A has height 2 and the left is missing,
soit is 0, and the difference is 2 again. AVL tree permits difference (balance factor) to be only
1.
BalanceFactor = height(left-sutree) − height(right-sutree)
If the difference in the height of left and right sub-trees is more than 1, the tree is balanced
usingsome rotation techniques.
AVL Rotations
To balance itself, an AVL tree may perform the following four kinds of rotations −
Left rotation
Right rotation
Left-Right rotation
Right-Left rotation
The first two rotations are single rotations and the next two rotations are double rotations.
To have an unbalanced tree, we at least need a tree of height 2. With this simple tree, let's
understand them one by one.
Left Rotation
If a tree becomes unbalanced, when a node is inserted into the right subtree of the right
subtree, then we perform a single left rotation −
In our example, node A has become unbalanced as a node is inserted in the right subtreeof
A's right subtree. We perform the left rotation by making A the left-subtree of B.
Right Rotation
AVL tree may become unbalanced, if a node is inserted in the left subtree of the left
subtree. The tree then needs a right rotation.
As depicted, the unbalanced node becomes the right child of its left child by performing a
rightrotation.
Left-RightRotation
Double rotations are slightly complex version of already explained versions of rotations. To
understand them better, we should take note of each action performed while rotation. Let's
first check how to perform Left-Right rotation. A left-right rotation is a combination of left
rotation followed by right rotation.
State Action
A node has been inserted into the right subtree of the left
subtree. This makes C an unbalanced node. These scenarios
cause AVL treeto perform left-right rotation.
Algorithm AVL TREE:
Insert:-
1. If P is NULL, then
I. P = new node
II. P ->element = x
III. P ->left = NULL
IV. P ->right = NULL
V. P ->height = 0
2. else if x>1 => x<P -
>elementa.) insert(x, P ->left)
b.) if height of P->left -height of P ->right =2
1. insert(x, P ->left)
2. if height(P ->left) -height(P ->right) =2if x<P ->left ->element
P =singlerotateleft(P)
else
3. else if x<P -
>element
P =doublerotateleft(P)
a.) insert(x, P -> right)
b.) if height (P -> right) -height (P ->left) =2if(x<P ->right)->element
P =singlerotateright(P)
else
P =doublerotateright(P)
4. else
Print already exits
5. int m, n, d.
6. m = AVL height (P->left)
7. n = AVL height (P->right)
8. d = max(m, n)
9. P->height = d+1
10. Stop
RotateWithLeftChild( AvlNode k2 )
 AvlNode k1 = k2.left;
 k2.left = k1.right;
 k1.right = k2;
 k2.height = max( height( k2.left ), height( k2.right ) ) + 1;
 k1.height = max( height( k1.left ), k2.height ) + 1;
 return k1;
RotateWithRightChild( AvlNode k1 )
 AvlNode k2 = k1.right;
 k1.right = k2.left;
 k2.left = k1;
 k1.height = max( height( k1.left ), height( k1.right ) ) + 1;
 k2.height = max( height( k2.right ), k1.height ) + 1;
 return k2;
DoubleWithLeftChild( AvlNode k3)
 k3.left = rotateWithRightChild( k3.left );
 return rotateWithLeftChild( k3 );
DoubleWithRightChild( AvlNode k1 )
 k1.right = rotateWithLeftChild( k1.right );
 return rotateWithRightChild( k1 );
Conclusion: Thus we have studied and implemented concept of AVL Tree with its operations.