#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = right = NULL;
    }
};

Node* insert(Node* root, int key) {
    if (root == NULL)
        return new Node(key);

    if (key < root->data)
        root->left = insert(root->left, key);
    else
        root->right = insert(root->right, key);

    return root;
}

void inorder(Node* root) {
    if (root == NULL)
        return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

void preorder(Node* root) {
    if (root == NULL)
        return;
    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}

void postorder(Node* root) {
    if (root == NULL)
        return;
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}

int height(Node* root) {
    if (root == NULL)
        return -1;

    int leftHeight = height(root->left);
    int rightHeight = height(root->right);

    return 1 + max(leftHeight, rightHeight);
}

int findMin(Node* root) {
    if (root == NULL) {
        cout << "Tree is empty.\n";
        return -1;
    }
    while (root->left != NULL)
        root = root->left;
    return root->data;
}

int findMax(Node* root) {
    if (root == NULL) {
        cout << "Tree is empty.\n";
        return -1;
    }
    while (root->right != NULL)
        root = root->right;
    return root->data;
}

bool search(Node* root, int key) {
    if (root == NULL)
        return false;

    if (root->data == key)
        return true;

    if (key < root->data)
        return search(root->left, key);

    return search(root->right, key);
}

void mirror(Node* root) {
    if (root == NULL)
        return;

    swap(root->left, root->right);
    mirror(root->left);
    mirror(root->right);
}

Node* deleteNode(Node* root, int key) {
    if (root == NULL)
        return root;

    if (key < root->data)
        root->left = deleteNode(root->left, key);
    else if (key > root->data)
        root->right = deleteNode(root->right, key);
    else {
        if (root->left == NULL && root->right == NULL) {
            delete root;
            return NULL;
        } else if (root->left == NULL) {
            Node* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == NULL) {
            Node* temp = root->left;
            delete root;
            return temp;
        } else {
            Node* temp = root->right;
            while (temp->left != NULL)
                temp = temp->left;
            root->data = temp->data;
            root->right = deleteNode(root->right, temp->data);
        }
    }
    return root;
}

int main() {
    Node* root = NULL;
    int choice, value, nodes;
    bool isMirrored = false;

    while (true) {
        cout << "\nMENU:\n";
        cout << "1] Insert Nodes\n2] Display Traversals\n";
        cout << "3] Find Largest Element\n4] Find Smallest Element\n";
        cout << "5] Find Height of Tree\n6] Search Element\n";
        cout << "7] Mirror the Tree\n8] Delete Node\n9] Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "How many nodes do you want to insert? ";
                cin >> nodes;
                for (int i = 0; i < nodes; i++) {
                    cout << "Enter value: ";
                    cin >> value;
                    root = insert(root, value);
                }
                break;

            case 2:
                cout << "\nInorder Traversal: ";
                inorder(root);
                cout << "\nPreorder Traversal: ";
                preorder(root);
                cout << "\nPostorder Traversal: ";
                postorder(root);
                cout << endl;
                break;

            case 3:
                cout << "Largest element: " << findMax(root) << endl;
                break;

            case 4:
                cout << "Smallest element: " << findMin(root) << endl;
                break;

            case 5:
                cout << "Height of tree: " << height(root) << endl;
                break;

            case 6:
                cout << "Enter element to search: ";
                cin >> value;
                if (search(root, value))
                    cout << value << " found in tree.\n";
                else
                    cout << value << " not found in tree.\n";
                break;

            case 7:
                cout << "\nBefore Mirroring (Inorder Traversal): ";
                inorder(root);
                mirror(root);
                isMirrored = !isMirrored;
                cout << "\nAfter Mirroring (Inorder Traversal): ";
                inorder(root);
                cout << endl;
                break;

            case 8:
                if (isMirrored) {
                    mirror(root);  // Un-mirror the tree back
                    isMirrored = false;
                }
                cout << "Enter node value to delete: ";
                cin >> value;
                root = deleteNode(root, value);
                cout << "Inorder traversal after deletion: ";
                inorder(root);
                cout << endl;
                break;

            case 9:
                cout << "Exiting program...\n";
                return 0;

            default:
                cout << "Invalid choice, try again.\n";
        }
    }
    return 0;
}

/*
OUTPUT : 

MENU:
1] Insert Nodes
2] Display Traversals
3] Find Largest Element
4] Find Smallest Element
5] Find Height of Tree
6] Search Element
7] Mirror the Tree
8] Delete Node
9] Exit
Enter your choice: 1
How many nodes do you want to insert? 5
Enter value: 67
Enter value: 23
Enter value: 12
Enter value: 45
Enter value: 89

MENU:
1] Insert Nodes
2] Display Traversals
3] Find Largest Element
4] Find Smallest Element
5] Find Height of Tree
6] Search Element
7] Mirror the Tree
8] Delete Node
9] Exit
Enter your choice: 2

Inorder Traversal: 12 23 45 67 89 
Preorder Traversal: 67 23 12 45 89 
Postorder Traversal: 12 45 23 89 67 

MENU:
1] Insert Nodes
2] Display Traversals
3] Find Largest Element
4] Find Smallest Element
5] Find Height of Tree
6] Search Element
7] Mirror the Tree
8] Delete Node
9] Exit
Enter your choice: 3
Largest element: 89

MENU:
1] Insert Nodes
2] Display Traversals
3] Find Largest Element
4] Find Smallest Element
5] Find Height of Tree
6] Search Element
7] Mirror the Tree
8] Delete Node
9] Exit
Enter your choice: 4
Smallest element: 12

MENU:
1] Insert Nodes
2] Display Traversals
3] Find Largest Element
4] Find Smallest Element
5] Find Height of Tree
6] Search Element
7] Mirror the Tree
8] Delete Node
9] Exit
Enter your choice: 5
Height of tree: 2

MENU:
1] Insert Nodes
2] Display Traversals
3] Find Largest Element
4] Find Smallest Element
5] Find Height of Tree
6] Search Element
7] Mirror the Tree
8] Delete Node
9] Exit
Enter your choice: 6
Enter element to search: 12
12 found in tree.

MENU:
1] Insert Nodes
2] Display Traversals
3] Find Largest Element
4] Find Smallest Element
5] Find Height of Tree
6] Search Element
7] Mirror the Tree
8] Delete Node
9] Exit
Enter your choice: 7

Before Mirroring (Inorder Traversal): 12 23 45 67 89 
After Mirroring (Inorder Traversal): 89 67 45 23 12 

MENU:
1] Insert Nodes
2] Display Traversals
3] Find Largest Element
4] Find Smallest Element
5] Find Height of Tree
6] Search Element
7] Mirror the Tree
8] Delete Node
9] Exit
Enter your choice: 8
Enter node value to delete: 67
Inorder traversal after deletion: 89 45 45 23 12 

MENU:
1] Insert Nodes
2] Display Traversals
3] Find Largest Element
4] Find Smallest Element
5] Find Height of Tree
6] Search Element
7] Mirror the Tree
8] Delete Node
9] Exit
Enter your choice: 9
Exiting program...
*/