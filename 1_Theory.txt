
Problem Statement:
Consider a telephone book database of N entries. Use a hash table to efficiently store and retrieve telephone numbers. Implement collision handling techniques and analyze their impact on performance.

Objectives:
1. To understand the concept of hash functions and hash tables.
2. To implement hash tables with appropriate collision handling methods.

Outcomes:
1. Students will learn how to implement and use hash tables in Python.
2. Students will understand the importance and use of collision resolution techniques like linear probing, quadratic probing, and chaining.

Software Requirements:
1. 64-bit OS
2. Python Programming Environment
3. Open-source text editor or IDE (e.g., VS Code)

Theory:
A hash function is a mathematical function used to convert a given input into a hash value, which then determines the index in a hash table. The hash function should ideally distribute keys uniformly across the hash table.

Hash Function Techniques:
1. Division Method:
   Hash(key) = key % table_size
   This method computes the hash index by taking the modulo of the key with the table size.

2. Multiplication Method:
   Uses a constant A (0 < A < 1) and multiplies it with the key. The fractional part is then multiplied by the table size and the floor is taken.

3. Mid-Square Method:
   Square the key and extract the middle part of the result to get the index.

Collision Resolution Techniques:
1. Chaining:
   Store multiple elements at the same index using linked lists.

2. Open Addressing Methods:
   - Linear Probing: If a collision occurs, check the next available slot sequentially.
   - Quadratic Probing: Probe using quadratic increments (e.g., +1², +2², ...).
   - Double Hashing: Use a second hash function to decide the step size for probing.

Probing Algorithm (Linear Example):
1. Start
2. Compute the initial index using the hash function.
3. If the slot is empty, insert the element.
4. If occupied, move to the next slot (i+1), repeat until an empty slot is found.
5. End

Conclusion:
Thus, we have studied and implemented the concept of hash tables using various hash functions and collision resolution techniques like chaining, linear probing, quadratic probing, and double hashing. These techniques help manage data collisions and improve lookup efficiency in hash-based data structures.
