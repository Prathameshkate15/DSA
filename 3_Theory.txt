
Problem Statement:
Convert an infix expression to its equivalent postfix expression using a stack. The expression contains operands, operators, and parentheses, and must obey operator precedence and associativity rules.

Objectives:
1. To understand the role of stacks in expression conversion.
2. To implement infix-to-postfix expression conversion using stack data structure.

Outcomes:
1. Students will be able to identify and apply stack operations.
2. Students will be able to convert infix expressions to postfix using an algorithmic approach.

Software Requirements:
1. 64-bit OS
2. Python Programming Environment
3. Text Editor or IDE (e.g., VS Code)

Theory:
Infix expressions place operators between operands, while postfix (Reverse Polish Notation) places operators after their operands. Stacks are ideal for converting infix to postfix as they handle operator precedence and parentheses efficiently.

Key Concepts:
- Infix Expression: (A + B) * C
- Postfix Expression: A B + C *

Operator Precedence:
- ^ (highest)
- * / %
- + - (lowest)

Associativity:
- Most operators are left-associative, except ^ which is right-associative.

Algorithm (Infix to Postfix Conversion):
1. Initialize an empty stack and an output list.
2. Scan the infix expression from left to right.
3. If the character is an operand, append it to output.
4. If the character is '(', push it to the stack.
5. If the character is ')', pop from the stack to output until '(' is found.
6. If the character is an operator:
   - While the stack is not empty and the precedence of the top is higher (or equal if left associative), pop to output.
   - Push the current operator on the stack.
7. After scanning, pop all remaining operators from the stack to output.

Example:
Input:   A + B * C
Output:  A B C * +

Pseudo Code:
function infixToPostfix(expression):
    for each token in expression:
        if token is operand:
            add to output
        else if token is '(':
            push to stack
        else if token is ')':
            while top != '(':
                pop to output
            pop '('
        else if token is operator:
            while stack not empty and precedence(top) >= precedence(token):
                pop to output
            push token
    while stack not empty:
        pop to output

Conclusion:
We have implemented the infix to postfix conversion using a stack. The use of stack enables systematic handling of operators based on precedence and associativity, making it efficient for expression parsing and compiler design.
