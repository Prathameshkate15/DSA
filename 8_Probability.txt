#include <iostream>
using namespace std;

void constructOBST();
void printTree(int, int);

float p[20], q[20], w[20][20], c[20][20];
int r[20][20], n;

int main() {
    cout << "\n**** PROGRAM FOR OBST ******\n";
    cout << "Enter the number of nodes: ";
    cin >> n;

    cout << "Enter probabilities for successful search:\n";
    for (int i = 1; i <= n; i++) {
        cout << "p[" << i << "]: ";
        cin >> p[i];
    }

    cout << "Enter probabilities for unsuccessful search:\n";
    for (int i = 0; i <= n; i++) {
        cout << "q[" << i << "]: ";
        cin >> q[i];
    }

    constructOBST();
    printTree(0, n);
    cout << endl;
}

void constructOBST() {
    for (int i = 0; i <= n; i++) {
        w[i][i] = q[i];
        c[i][i] = 0;
        r[i][i] = 0;
        if (i < n) {
            w[i][i + 1] = q[i] + q[i + 1] + p[i + 1];
            c[i][i + 1] = w[i][i + 1];
            r[i][i + 1] = i + 1;
        }
    }

    for (int len = 2; len <= n; len++) {
        for (int i = 0; i <= n - len; i++) {
            int j = i + len;
            w[i][j] = w[i][j - 1] + p[j] + q[j];
            c[i][j] = 1e9;
            for (int k = i + 1; k <= j; k++) {
                float cost = c[i][k - 1] + c[k][j];
                if (cost < c[i][j]) {
                    c[i][j] = cost;
                    r[i][j] = k;
                }
            }
            c[i][j] += w[i][j];
        }
    }

    cout << "\nOptimal BST Cost: " << c[0][n] << "\n";
}

void printTree(int left, int right) {
    if (left >= right) return;
    if (r[left][r[left][right] - 1])
        cout << "Left child of " << r[left][right] << ": " << r[left][r[left][right] - 1] << "\n";
    if (r[r[left][right]][right])
        cout << "Right child of " << r[left][right] << ": " << r[r[left][right]][right] << "\n";
    printTree(left, r[left][right] - 1);
    printTree(r[left][right], right);
}

/*
**********OUTPUT**********
Enter the number of nodes: 3
Enter probabilities for successful search:
p[1]: 2
p[2]: 4
p[3]: 6
Enter probabilities for unsuccessful search:
q[0]: 3
q[1]: 6
q[2]: 9
q[3]: 7
Optimal BST Cost: 70
Left child of 2: 1
Right child of 2: 3

=== Code Execution Successful ===
*/